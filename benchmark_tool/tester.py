import logging
import tempfile
import subprocess
import os
import re
from typing import Tuple, Optional

class CodeTester:
    """
    A class that tests Python code generated by CodeGenerator using Pytest, 
    without requiring a known function name. The first 'def function_name(' 
    it finds will be tested.
    """

    def __init__(self):
        # Setup logging if needed
        self.logger = logging.getLogger(__name__)
        if not self.logger.handlers:
            logging.basicConfig(level=logging.INFO)

    def test_code(self, code_str: str) -> Tuple[bool, str]:
        """
        Tests the generated Python code by:
            1) Writing it to a temporary file (generated_code.py).
            2) Parsing out the first function name (if any).
            3) Creating a minimal test_ file that:
               - Imports the module
               - Calls the function (if found)
            4) Running pytest as a subprocess, capturing console output.

        Args:
            code_str (str): The Python code to test.

        Returns:
            (success, output):
                success (bool)  : True if tests passed, False otherwise
                output  (str)   : The captured stdout/stderr from the pytest run
        """
        # Ensure the code is non-empty
        if not code_str.strip():
            raise ValueError("Cannot test empty code string")

        # Try to find the *first* function name defined in the code
        function_name = self._find_function_name(code_str)

        # Create a temporary directory to store the generated code and test
        with tempfile.TemporaryDirectory() as tmpdir:
            # 1) Write the generated code to a file
            code_file_path = os.path.join(tmpdir, "generated_code.py")
            with open(code_file_path, "w", encoding="utf-8") as f:
                f.write(code_str)

            # 2) Build a minimal test file
            test_code = self._build_test_code(function_name)

            # 3) Write the test file
            test_file_path = os.path.join(tmpdir, "test_generated_code.py")
            with open(test_file_path, "w", encoding="utf-8") as f:
                f.write(test_code)

            # 4) Run pytest as a subprocess
            cmd = [
                "pytest",
                "--maxfail=1",
                "--disable-warnings",
                "--tb=short",
                test_file_path
            ]

            process = subprocess.Popen(
                cmd,
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                cwd=tmpdir,
                text=True
            )
            out, _ = process.communicate()

            success = (process.returncode == 0)

            # Log results
            if success:
                self.logger.info("Pytest: All tests passed successfully.")
            else:
                self.logger.warning("Pytest: Some tests failed.")

            return success, out

    def _find_function_name(self, code_str: str) -> Optional[str]:
        """
        Parses the code string to find the first function definition,
        i.e., a line matching 'def <name>('.

        Returns:
            The name of the first function, or None if none found.
        """
        # Regex to match a Python function definition:
        # ^\s*def\s+([a-zA-Z_][a-zA-Z0-9_]*)\s*\(
        # Explanation:
        # - ^\s*: Start of line with optional whitespace
        # - def\s+: 'def' followed by 1+ spaces
        # - ([a-zA-Z_][a-zA-Z0-9_]*): Capture group for valid Python identifier
        # - \s*\(: Optional whitespace followed by '('
        pattern = r'^\s*def\s+([a-zA-Z_][a-zA-Z0-9_]*)\s*\('
        match = re.search(pattern, code_str, flags=re.MULTILINE)
        if match:
            return match.group(1)
        return None

    def _build_test_code(self, function_name: Optional[str]) -> str:
        """
        Creates a minimal Pytest test file. If function_name is found,
        we import the code, check for the function name, and try calling it.
        If function_name is None, we just test that the code can be imported.
        """
        # Base test: ensure code can be imported
        test_code = [
            "import pytest",
            "import generated_code"
        ]

        # If we found a function name, let's test it
        if function_name:
            test_code.append(f"""
def test_function_exists():
    assert hasattr(generated_code, "{function_name}"), "Function '{function_name}' not found in generated_code."

def test_function_call():
    # Attempt a no-arg call
    try:
        result = getattr(generated_code, "{function_name}")()
    except TypeError:
        pytest.skip("Function requires arguments; skipping no-arg call.")
    except Exception as e:
        pytest.fail(f"Calling '{function_name}' raised an unexpected error: {{e}}")

# Additional domain-specific checks could be added here
""")
        else:
            # No function found, so let's just confirm the code imported
            test_code.append("""
def test_import_only():
    # Minimal check that the module imports without syntax error or crash
    assert True
""")

        return "\n".join(test_code)
